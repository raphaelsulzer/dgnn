features:
  scaling: s
  normalization_range: [0,1]
  node_features: [shape,vertex,facet,count,min,max,sum,first,second]  # important feature, only with "first" results are much worse
  edge_features: [shape,vertex,facet,count,min,max,sum]
  node_normalization_feature: null
  edge_normalization_feature: null
graph:
  num_hops: 4 # outer hops (unsupervised) == num_layers
  additional_num_hops: 0 # inner hops (supervised), this is there for having a supervised connected component, if set to 0, only the last layer of num_hops is supervised in the form of unconnected nodes
  clique_sizes: # -1 meaning sample all existing nodes
    - -1
  self_loops: 0
inference:
  dataset: aerial
  classes: null
  shapes_per_conf_per_class: 1
  files: null
  scan_confs: 0
  batch_size: 1024
  per_layer: 1
  has_label: 1
  model: best
  graph_cut: true
  fix_orientation: true
  export: ["prediction","mesh"]
  metrics: [ "loss","chamfer" ]
validation:
  dataset: aerial
  classes: null
  shapes_per_conf_per_class: 10
  scan_confs: 0
  batch_size: 1024
  per_layer: 1
  graph_cut: true
  fix_orientation: true
  metrics: [ "loss" ]
training:
  dataset: aerial
  classes: null
  data_percentage: 0.95
  shapes_per_conf_per_class: 3
  scan_confs: 1
  files: null
  batch_size: 1024
  epochs: 100
  loss: kl
  learning_rate: 0.005
  adjust_lr_every: 16
  load_epoch: 0
  print_every: 1000
  val_every: 5000
  export_every: 10000
model:
  type: sage
  encoder: null
  convs: [64, 128, 256, 512] # specify the OUT channels of sage convs
  edge_convs: 1
  decoder: 2
  concatenate: 0 # whether to concatenate (or add) target to source node embedding
  edge_prediction: 0
  normalization: b
time:
  start: ""
  end: ""
paths:
  data: /mnt/raphael/
  out: /mnt/raphael/aerial/out/sqrt_vol/
regularization:
  cell_type: vol
  cell_norm: sqrt # [null, sqrt, log]
  edge_type: null # edge regularization
  edge_epoch: null # edge regularization
  edge_weight: 0.4 # edge regularization
graph_cut:
  unary_weight: 10
  unary_type: logits
  binary_weight: 10
  binary_type: beta