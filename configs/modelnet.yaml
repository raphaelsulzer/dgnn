features:
  scaling: s
  normalization_range: [0,1]
  node_features: [shape,vertex,facet,count,min,max,sum,first,second]  # important feature, only with "first" results are much worse
  edge_features: [shape,vertex,facet,count,min,max,sum]
  node_normalization_feature: null
  edge_normalization_feature: null
graph:
  num_hops: 4 # outer hops (unsupervised) == num_layers
  additional_num_hops: 0 # inner hops (supervised), this is there for having a supervised connected component, if set to 0, only the last layer of num_hops is supervised in the form of unconnected nodes
  clique_sizes: [-1] # -1 meaning sample all existing nodes
  self_loops: 0
inference:
  dataset: ModelNet10
  classes: null
  shapes_per_conf_per_class: 100000
  files: null
  scan_confs: [43]
  batch_size: 0
  per_layer: 1
  has_label: 1
  model: best
  graph_cut: 1
  fix_orientation: 1
  export: [ "mesh" ]
  metrics: [ "iou" ]
validation:
  dataset: ShapeNet
  classes: null
  shapes_per_conf_per_class: 10
  scan_confs: [4]
  batch_size: 0
  per_layer: 1
  graph_cut: true
  fix_orientation: false
  metrics: [ "iou","loss" ]
training:
  dataset: ShapeNet
  classes: null
  data_percentage: 1.0
  shapes_per_conf_per_class: 1000
  scan_confs: [4]
  files: null
  batch_size: 1024
  epochs: 101
  loss: kl
  learning_rate: 0.0005
  adjust_lr_every: 15
  load_epoch: 0
  print_every: 1000
  val_every: 10000
  export_every: 10000
model:
  type: sage
  encoder: null
  convs: [128, 256, 512, 1024] # specify the OUT channels of sage convs
  edge_convs: 1
  decoder: 2
  concatenate: 0 # whether to concatenate (or add) target to source node embedding
  edge_prediction: 0
  normalization: b
time:
  start: ""
  end: ""
paths:
#  data: /linkhome/rech/genlgm01/uku93eu/scratch/ShapeNet
#  out: /linkhome/rech/genlgm01/uku93eu/scratch/ShapeNet_out/dgnn/tr
  data: /mnt/raphael/ModelNet10
  out: /mnt/raphael/ModelNet10_out/dgnn/ablation/no_geom
  train_split: train
  val_split: val
  test_split: test
regularization:
  cell_type: vol
  cell_norm: null # [null, sqrt, log]
  edge_type: null # edge regularization
  edge_epoch: null # edge regularization
  edge_weight: 0.4 # edge regularization
graph_cut:
  unary_weight: 10
  unary_type: logits
  binary_weight: 10
  binary_type: beta